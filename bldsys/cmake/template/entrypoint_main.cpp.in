/* Copyright (c) 2019, Arm Limited and Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Generated file by CMake. Don't edit.

#include "common/logging.h"
#include "platform/platform.h"

#include "@TARGET_INCLUDE_PATH@.h"

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#	include "platform/android/android_platform.h"
void android_main(android_app *state)
{
	vkb::AndroidPlatform platform{state};
#elif defined(VK_USE_PLATFORM_WIN32_KHR)
#	include "platform/windows/windows_platform.h"
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
                     PSTR lpCmdLine, INT nCmdShow)
{
	vkb::WindowsPlatform platform{hInstance, hPrevInstance,
	                              lpCmdLine, nCmdShow};
#else
#	include "platform/unix/unix_platform.h"
int main(int argc, char *argv[])
{
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	vkb::UnixPlatform platform{vkb::UnixType::Mac, argc, argv};
#elif defined(VK_USE_PLATFORM_XCB_KHR)
	vkb::UnixPlatform platform{vkb::UnixType::Linux, argc, argv};
#endif
#endif

#ifndef DEBUG
	try
	{
#endif
		auto app = create_@TARGET_CREATE_FUNC@();
		app->set_name("@TARGET_NAME@");
		app->parse_options(platform.get_arguments());

		if (platform.initialize(std::move(app)))
		{
			platform.main_loop();
			platform.terminate(vkb::ExitCode::Success);
		}
		else
		{
			platform.terminate(vkb::ExitCode::UnableToRun);
		}
#ifndef DEBUG
	}
	catch (const std::exception &e)
	{
		LOGE(e.what());
		platform.terminate(vkb::ExitCode::FatalError);
	}
#endif

#ifndef VK_USE_PLATFORM_ANDROID_KHR
	return EXIT_SUCCESS;
#endif
}
