stages:
  - Check
  - Build
  - Test

Doxygen:
  stage: Check
  image: $DOCKER_REGISTRY/docker/doxygen/linux:latest
  tags:
    - linux
    - docker
  script:
    - mkdir -p doxygen
    - doxygen docs/doxygen/doxyfile
    - if [ $(stat -c%s doxygen/warnings.txt) -gt 0 ]; then cat doxygen/warnings.txt; exit 1; fi

CopyrightHeaders:
  stage: Check
  image: $DOCKER_REGISTRY/docker/copyright-check/linux:latest
  tags:
    - linux
    - docker
  script:
    - python3 /usr/local/bin/check_copyright_headers.py $TARGET_BRANCH

SnakeCase:
  stage: Check
  image: $DOCKER_REGISTRY/docker/snake_case_check/linux:latest
  tags:
    - linux
    - docker
  script:
    - git snake-case $TARGET_BRANCH > snake-report.txt
    - if [ $(grep -c '@@' snake-report.txt) -gt 0 ]; then cat snake-report.txt; exit 1; fi
  allow_failure: true

ClangFormat:
  stage: Check
  image: $DOCKER_REGISTRY/docker/cpp-code-check/linux:latest
  tags:
    - linux
    - docker
  script:
    - git clang-format -v --diff $TARGET_BRANCH > clang-format-report.txt
    - if [ $(grep -c 'clang-format did not modify any files' clang-format-report.txt) -eq 0  ] && [ $(grep -c 'no modified files to format' clang-format-report.txt) -eq 0  ]; then cat clang-format-report.txt; exit 1; fi

ClangTidy:
  stage: Check
  image: $DOCKER_REGISTRY/docker/cpp-code-check/linux:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - linux
    - docker
  script:
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -H. -Bbuild
    - python3 /usr/local/bin/run-clang-tidy.py -p build -clang-tidy-binary=clang-tidy-8 -header-filter=.*,-third_party -checks=-*,google-*,-google-runtime-references -quiet framework samples app

Linux:
  stage: Build
  image: $DOCKER_REGISTRY/docker/vulkan-cookbook/linux:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - linux
    - docker
  script:
    - cmake -G "Unix Makefiles" -H. -Bbuild -DCMAKE_BUILD_TYPE=Release -DVKB_BUILD_TESTS=ON -DVKB_BUILD_SAMPLES=ON
    - cmake --build build --target vulkan_best_practice --config Release

Windows:
  stage: Build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - windows
    - shell
  script:
    - cmake -H. -Bbuild -DVKB_BUILD_TESTS:BOOL=ON -DVKB_BUILD_SAMPLES:BOOL=ON
    - cmake --build build --target vulkan_best_practice --config Release

Android:
  stage: Build
  image: $DOCKER_REGISTRY/docker/vulkan-cookbook/linux-android:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - linux
    - docker
  script:
    - cmake -G "Unix Makefiles" -H. -Bbuild -DCMAKE_TOOLCHAIN_FILE=bldsys/toolchain/android_gradle.cmake -DVKB_BUILD_TESTS=ON -DVKB_BUILD_SAMPLES=ON
    - cmake --build build --config Release --target vulkan_best_practice_package

LinuxExternalProject:
  stage: Test
  image: $DOCKER_REGISTRY/docker/vulkan-cookbook/linux:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - linux
    - docker
  script:
    - cmake -Htests/external_project -Bbuild -DVKB_BUILD_SAMPLES=OFF

WindowsExternalProject:
  stage: Test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - windows
    - shell
  script:
    - cmake -Htests/external_project -Bbuild -DVKB_BUILD_SAMPLES=OFF

AndroidExternalProject:
  stage: Test
  image: $DOCKER_REGISTRY/docker/vulkan-cookbook/linux-android:latest
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - linux
    - docker
  script:
    - cmake -DCMAKE_TOOLCHAIN_FILE=../../bldsys/toolchain/android_gradle.cmake -Htests/external_project -Bbuild -DVKB_BUILD_SAMPLES=OFF